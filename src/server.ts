import express from "express";
import path from 'path'; // Importa√ß√£o NECESS√ÅRIA para o path

// 2. CRIAR APLICA√á√ÉO EXPRESS
const app = express();

// 3. DEFINIR PORTA
const port = 3000;

// ‚úÖ CONFIGURA√á√ÉO DO EJS (ADICIONADO)
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// 4. MIDDLEWARE PARA ENTENDER JSON
app.use(express.json());

// ‚úÖ MIDDLEWARE PARA ARQUIVOS EST√ÅTICOS (ADICIONADO)
app.use(express.static('src/public'));

// ‚úÖ MIDDLEWARE PARA FORMUL√ÅRIOS (ADICIONADO)
app.use(express.urlencoded({ extended: true }));

// 5. MIDDLEWARE DE LOG (para ver requests no terminal)
app.use((req, res, next) => {
  console.log(`üì• ${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// 6. ROTA PRINCIPAL (RAIZ)
app.get("/", (req, res) => {
  res.json({ 
    message: "‚úÖ API NotaDez funcionando!",
    timestamp: new Date().toISOString(),
    versao: "1.0.0",
    status: "sucesso"
  });
});

// 7. ROTA DE HEALTH CHECK (sa√∫de do servidor)
app.get("/health", (req, res) => {
  res.json({ 
    status: "OK",
    environment: process.env.NODE_ENV || "development",
    database: "MySQL",
    framework: "Express.js"
  });
});

// ‚úÖ NOVA ROTA PARA A VIEW EJS (ADICIONADA)
app.get("/web", (req, res) => {
  res.render('notes/index', { 
    title: 'P√°gina de Notas',
    versao: '1.0.0'
  });
});

// 8. ROTA DE EXEMPLO PARA PROFESSORES
app.get("/api/professores", (req, res) => {
  res.json({
    data: [],
    message: "Endpoint de professores funcionando!",
    total: 0
  });
});

// 9. INICIAR SERVIDOR
app.listen(port, () => {
  console.log("====================================");
  console.log("üöÄ SERVIDOR NOTADEZ INICIADO!");
  console.log("üì° URL: http://localhost:" + port);
  console.log("ü©∫ Health: http://localhost:" + port + "/health");
  console.log("‚≠ê API Root: http://localhost:" + port + "/");
  console.log("üë®‚Äçüè´ Professores: http://localhost:" + port + "/api/professores");
  console.log("üåê P√°gina Web: http://localhost:" + port + "/web"); // ‚úÖ LINHA ADICIONADA
  console.log("====================================");
  console.log("‚ö†Ô∏è  Pressione Ctrl + C para parar o servidor");
  console.log("====================================");
});

// 10. TRATAMENTO DE ERROS GLOBAIS
process.on("SIGINT", () => {
  console.log("\nüõë Servidor encerrado pelo usu√°rio");
  process.exit(0);
});

// 11. TRATAMENTO DE ROTAS N√ÉO ENCONTRADAS (404)
app.use((req, res) => {
  res.status(404).json({
    error: "Rota n√£o encontrada",
    message: `A rota ${req.method} ${req.path} n√£o existe`,
    suggest: "Verifique a documenta√ß√£o da API"
  });
});